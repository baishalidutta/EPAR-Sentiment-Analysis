__author__ = "Baishali Dutta"
__copyright__ = "Copyright (C) 2021 Baishali Dutta"
__license__ = "Apache License 2.0"
__version__ = "0.1"

# -------------------------------------------------------------------------
#                           Import Libraries
# -------------------------------------------------------------------------
import gradio as gr
import numpy as np

from app import DEFAULT_DATASET_LOC, DEFAULT_TEST_SPLIT, DEFAULT_CV_SPLIT
from source.util.classifier_factory import get_classifier, all_classifiers


def __make_prediction__(input_classifier, input_sentence, threshold):
    """
    Predicts the target class of the specified sentence

    :param input_classifier: the classifier to use
    :param input_sentence: the sentence to be verified
    :param threshold: the probability threshold
    :return: the target class
    """
    clf = get_classifier(input_classifier + 1)
    if clf is None:
        raise Exception("Sorry, no classifier found")

    result = clf.predict(DEFAULT_DATASET_LOC, DEFAULT_TEST_SPLIT, DEFAULT_CV_SPLIT, input_sentence)
    return __match_class__(result, threshold)


def __match_class__(result, threshold):
    """
    Matches result to the appropriate type of the classifier.
    Result generated by Bidirectional LSTM will be a 2D array
    whereas the result generated by classical machine learning
    classifier will be an 1D array.

    In addition, the 2D array will contain the probabilities of all
    target classes whereas the 1D array will only contain one value
    indicating the target class. The probabilities in the 2D array
    are further compared against '0.5' threshold to select which
    target class the result actually belongs to.

    :param result: the result to be matched
    :param threshold: the probability threshold
    :return: the predicted target class
    """
    res = np.asarray(result)
    if len(res.shape) == 2:
        # LSTM result
        if result[0][0] > threshold:
            return "Positive"
        elif result[0][1] > threshold:
            return "Negative"
        else:
            return "Neutral"
    else:
        # classical machine learning classifier result
        if result[0] == 0:
            return "Negative"
        elif result[0] == 1:
            return "Neutral"
        else:
            return "Positive"


def __init_web_app__():
    """
    Initialized Gradio web components and interface
    """
    # retrieve the names of the classifiers from factory
    values = list(all_classifiers.values())
    classifier_list = map(lambda clf: clf.name[0], values)

    classifier = gr.inputs.Dropdown(list(classifier_list), label="Classifier", type="index")
    sentence = gr.inputs.Textbox(lines=17, placeholder="Enter your sentence here")
    threshold = gr.inputs.Slider(minimum=0.1, maximum=1.0, default=0.5, label="Probability Threshold for LSTM")

    title = "EPAR Sentiment Analysis"
    description = "This application uses several classifiers to classify the feedbacks on " \
                  "clinical efficacies from European Public Assessment Reports (EPARs)"

    gr.Interface(fn=__make_prediction__,
                 inputs=[classifier, threshold, sentence],
                 outputs="label",
                 title=title,
                 description=description) \
        .launch()


# -------------------------------------------------------------------------
#                           Main Application
# -------------------------------------------------------------------------
if __name__ == '__main__':
    __init_web_app__()
